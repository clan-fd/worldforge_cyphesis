// AUTOGENERATED file, created by the tool generate_stub.py, don't edit!
// If you want to add your own functionality, instead edit the stubBaseWorld_custom.h file.

#ifndef STUB_RULES_SIMULATION_BASEWORLD_H
#define STUB_RULES_SIMULATION_BASEWORLD_H

#include "rules/simulation/BaseWorld.h"
#include "stubBaseWorld_custom.h"

#ifndef STUB_BaseWorld_BaseWorld
//#define STUB_BaseWorld_BaseWorld
   BaseWorld::BaseWorld(TimeProviderFnType timeProviderFn)
    : Singleton(timeProviderFn)
  {
    
  }
#endif //STUB_BaseWorld_BaseWorld

#ifndef STUB_BaseWorld_shutdown
//#define STUB_BaseWorld_shutdown
  void BaseWorld::shutdown()
  {
    
  }
#endif //STUB_BaseWorld_shutdown

#ifndef STUB_BaseWorld_getEntity
//#define STUB_BaseWorld_getEntity
  Ref<LocatedEntity> BaseWorld::getEntity(const std::string& id) const
  {
    return *static_cast<Ref<LocatedEntity>*>(nullptr);
  }
#endif //STUB_BaseWorld_getEntity

#ifndef STUB_BaseWorld_getEntity
//#define STUB_BaseWorld_getEntity
  Ref<LocatedEntity> BaseWorld::getEntity(long id) const
  {
    return *static_cast<Ref<LocatedEntity>*>(nullptr);
  }
#endif //STUB_BaseWorld_getEntity

#ifndef STUB_BaseWorld_registerAlias
//#define STUB_BaseWorld_registerAlias
  void BaseWorld::registerAlias(std::string alias, LocatedEntity& entity)
  {
    
  }
#endif //STUB_BaseWorld_registerAlias

#ifndef STUB_BaseWorld_deregisterAlias
//#define STUB_BaseWorld_deregisterAlias
  void BaseWorld::deregisterAlias(const std::string& alias, LocatedEntity& entity)
  {
    
  }
#endif //STUB_BaseWorld_deregisterAlias

#ifndef STUB_BaseWorld_getAliasEntity
//#define STUB_BaseWorld_getAliasEntity
  LocatedEntity* BaseWorld::getAliasEntity(const std::string& alias) const
  {
    return nullptr;
  }
#endif //STUB_BaseWorld_getAliasEntity

#ifndef STUB_BaseWorld_getTime
//#define STUB_BaseWorld_getTime
  std::chrono::steady_clock::duration BaseWorld::getTime() const
  {
    return *static_cast<std::chrono::steady_clock::duration*>(nullptr);
  }
#endif //STUB_BaseWorld_getTime

#ifndef STUB_BaseWorld_getTimeAsSeconds
//#define STUB_BaseWorld_getTimeAsSeconds
  float BaseWorld::getTimeAsSeconds() const
  {
    return 0;
  }
#endif //STUB_BaseWorld_getTimeAsSeconds

#ifndef STUB_BaseWorld_setIsSuspended
//#define STUB_BaseWorld_setIsSuspended
  void BaseWorld::setIsSuspended(bool suspended)
  {
    
  }
#endif //STUB_BaseWorld_setIsSuspended

#ifndef STUB_BaseWorld_addEntity
//#define STUB_BaseWorld_addEntity
  void BaseWorld::addEntity(const Ref<LocatedEntity>& obj, const Ref<LocatedEntity>& parent)
  {
    
  }
#endif //STUB_BaseWorld_addEntity

#ifndef STUB_BaseWorld_addNewEntity
//#define STUB_BaseWorld_addNewEntity
  Ref<LocatedEntity> BaseWorld::addNewEntity(const std::string& type, const Atlas::Objects::Entity::RootEntity&)
  {
    return *static_cast<Ref<LocatedEntity>*>(nullptr);
  }
#endif //STUB_BaseWorld_addNewEntity

#ifndef STUB_BaseWorld_delEntity
//#define STUB_BaseWorld_delEntity
  void BaseWorld::delEntity(LocatedEntity* obj)
  {
    
  }
#endif //STUB_BaseWorld_delEntity

#ifndef STUB_BaseWorld_getSpawnEntities
//#define STUB_BaseWorld_getSpawnEntities
  const std::set<std::string>& BaseWorld::getSpawnEntities() const
  {
    static std::set<std::string> instance; return instance;
  }
#endif //STUB_BaseWorld_getSpawnEntities

#ifndef STUB_BaseWorld_registerSpawner
//#define STUB_BaseWorld_registerSpawner
  void BaseWorld::registerSpawner(const std::string& id)
  {
    
  }
#endif //STUB_BaseWorld_registerSpawner

#ifndef STUB_BaseWorld_unregisterSpawner
//#define STUB_BaseWorld_unregisterSpawner
  void BaseWorld::unregisterSpawner(const std::string& id)
  {
    
  }
#endif //STUB_BaseWorld_unregisterSpawner

#ifndef STUB_BaseWorld_message
//#define STUB_BaseWorld_message
  void BaseWorld::message(Atlas::Objects::Operation::RootOperation, LocatedEntity& obj)
  {
    
  }
#endif //STUB_BaseWorld_message

#ifndef STUB_BaseWorld_findByName
//#define STUB_BaseWorld_findByName
  Ref<LocatedEntity> BaseWorld::findByName(const std::string& name)
  {
    return *static_cast<Ref<LocatedEntity>*>(nullptr);
  }
#endif //STUB_BaseWorld_findByName

#ifndef STUB_BaseWorld_findByType
//#define STUB_BaseWorld_findByType
  Ref<LocatedEntity> BaseWorld::findByType(const std::string& type)
  {
    return *static_cast<Ref<LocatedEntity>*>(nullptr);
  }
#endif //STUB_BaseWorld_findByType


#endif